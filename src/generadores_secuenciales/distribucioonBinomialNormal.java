/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package generadores_secuenciales;

import java.awt.Color;
import java.awt.image.BufferedImage;
import javafx.scene.chart.CategoryAxis;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

import org.jfree.chart.*;
import org.jfree.data.*;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.xy.IntervalXYDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.ui.ApplicationFrame;
import org.jfree.ui.RefineryUtilities;

public class distribucioonBinomialNormal extends javax.swing.JFrame {

    JFreeChart grafica;
    DefaultCategoryDataset Datos = new DefaultCategoryDataset();

    private int k = 0; //almacena el valor de k 
    private int d = 0;//almacena el valor de d
    private int a = 0;//almacena el valor de a
    private int c = 0;//almacena el valor de c
    private double x = 0;//almacena el valor de x
    private double m = 0;//almacena el valor de m
    private int valoresObtenidos[]; // almacenar los numeros aleatorios uniformes
    private double intervalosEjeXHistograma[];
    private int frecuenciaGlobal[];

    /**
     * Creates new form generador_multiplicativo
     */
    public distribucioonBinomialNormal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField2 = new javax.swing.JTextField();
        btn_calcular = new javax.swing.JButton();
        txt_k = new javax.swing.JTextField();
        lbl_k = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_datos = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        lbl_periodo = new javax.swing.JLabel();
        txt_media = new javax.swing.JTextField();
        txt_varianza = new javax.swing.JTextField();
        txt_desviacionEstandar = new javax.swing.JTextField();
        txt_mediana = new javax.swing.JTextField();
        lbl_Media = new javax.swing.JLabel();
        lbl_mediana = new javax.swing.JLabel();
        lbl_varianza = new javax.swing.JLabel();
        lbl_desviacionEstandar = new javax.swing.JLabel();
        lbl_numIntervalosHistograma = new javax.swing.JLabel();
        txt_numeroIntervalo = new javax.swing.JFormattedTextField();
        btn_histograma = new javax.swing.JButton();
        txt_binomialP = new javax.swing.JFormattedTextField();
        lbl_binomialP = new javax.swing.JLabel();
        btn_verGraficaBinomial = new javax.swing.JButton();
        btn_graficaNormal = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txt_moda = new javax.swing.JTextField();
        lbl_mediana1 = new javax.swing.JLabel();
        btn_mostrarUniforme = new javax.swing.JButton();
        principal = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jTextField2.setText("jTextField2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_calcular.setText("Calcular");
        btn_calcular.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_calcularMouseClicked(evt);
            }
        });
        btn_calcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_calcularActionPerformed(evt);
            }
        });
        btn_calcular.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btn_calcularKeyPressed(evt);
            }
        });
        getContentPane().add(btn_calcular, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 110, -1, -1));

        txt_k.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                txt_kMouseExited(evt);
            }
        });
        txt_k.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_kKeyReleased(evt);
            }
        });
        getContentPane().add(txt_k, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 60, 120, -1));

        lbl_k.setText("Ingrese K:");
        getContentPane().add(lbl_k, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, -1, -1));

        jScrollPane1.setToolTipText("");

        table_datos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "n", "Numero Aleatorio"
            }
        ));
        jScrollPane1.setViewportView(table_datos);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 0, 270, 570));

        jLabel1.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        jLabel1.setText("Distribucion uniforme");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, -1, -1));
        getContentPane().add(lbl_periodo, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 360, 140, 20));
        getContentPane().add(txt_media, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 30, 110, -1));

        txt_varianza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_varianzaActionPerformed(evt);
            }
        });
        getContentPane().add(txt_varianza, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 310, 110, -1));
        getContentPane().add(txt_desviacionEstandar, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 410, 110, -1));
        getContentPane().add(txt_mediana, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 120, 110, -1));

        lbl_Media.setText("Media");
        getContentPane().add(lbl_Media, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 10, -1, -1));

        lbl_mediana.setText("Mediana");
        getContentPane().add(lbl_mediana, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 90, -1, -1));

        lbl_varianza.setText("Varianza");
        getContentPane().add(lbl_varianza, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 270, -1, -1));

        lbl_desviacionEstandar.setText("Desviaci√≥n estandar");
        getContentPane().add(lbl_desviacionEstandar, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 360, -1, -1));

        lbl_numIntervalosHistograma.setText("Numero de intervalos histograma");
        getContentPane().add(lbl_numIntervalosHistograma, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 90, -1, -1));

        txt_numeroIntervalo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        getContentPane().add(txt_numeroIntervalo, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 130, 110, -1));

        btn_histograma.setText("Ver Histograma");
        btn_histograma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_histogramaActionPerformed(evt);
            }
        });
        getContentPane().add(btn_histograma, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 190, -1, -1));

        txt_binomialP.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        getContentPane().add(txt_binomialP, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 270, 110, -1));

        lbl_binomialP.setText("Ingrese el valor de p:");
        getContentPane().add(lbl_binomialP, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 240, -1, -1));

        btn_verGraficaBinomial.setText("Ver Grafica Binomial");
        btn_verGraficaBinomial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_verGraficaBinomialActionPerformed(evt);
            }
        });
        getContentPane().add(btn_verGraficaBinomial, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 330, -1, -1));

        btn_graficaNormal.setText("Ver grafica Normal");
        btn_graficaNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_graficaNormalActionPerformed(evt);
            }
        });
        getContentPane().add(btn_graficaNormal, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 480, -1, -1));

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 0, 40, 580));
        getContentPane().add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 380, 270, 20));

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 0, 10, 590));

        jLabel3.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        jLabel3.setText("Distribucion Normal");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 420, -1, -1));

        jLabel4.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        jLabel4.setText("Distribucion Binomial");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 30, -1, -1));
        getContentPane().add(txt_moda, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 200, 110, -1));

        lbl_mediana1.setText("Moda");
        getContentPane().add(lbl_mediana1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 170, -1, -1));

        btn_mostrarUniforme.setText("Generar distribucion uniforme");
        btn_mostrarUniforme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_mostrarUniformeActionPerformed(evt);
            }
        });
        getContentPane().add(btn_mostrarUniforme, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, -1, -1));
        getContentPane().add(principal, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 950, 590));

        jLabel2.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        jLabel2.setText("Generador secuencial mixto");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_calcularMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_calcularMouseClicked

        if (txt_k.getText().equalsIgnoreCase("")) { //verifica si estan ingresadas todas las variables
            JOptionPane.showMessageDialog(null, "Faltan valores por ingresar", "ERROR", JOptionPane.ERROR_MESSAGE);//enviamos un mensaje de error
        } else {
            
            String columnaCabezera[] = {"n", "Numeros aleatorios"}; //almacenamos los valores de la primera fila

            Object datos[][] = new Object[(int) k][5];//almacena los datos con el tama√±o de m filas por 5 columnas
            valoresObtenidos = new int[(int) k];

            for (int i = 1; i <= k; i++) {
                //le damos los valores a la fila
//                if(i>100){
                datos[i - 1][0] = "" + i; //primera columna almacena el valor de cuantas veces recorrio n
//                datos[i - 1][1] = x + "";//segunda columna almacena el valor de Xn
//                datos[i - 1][2] = r + " + " + r + "/" + m; // tercera columna almacena el valor de (aXn+c)mod m
//                datos[i - 1][3] = r + ""; //cuarta fila almacena el valor del resultado Xn+1
                datos[i - 1][1] = (int) (Math.random() * k) + 1; // quinta fila almacena el numero uniforme
//                }
                valoresObtenidos[i - 1] = (int) datos[i - 1][1]; // guardamos los numeros uniformes

            }
            DefaultTableModel dtm = new DefaultTableModel(datos, columnaCabezera); //creamos el modelo para la tabla
            table_datos.setModel(dtm);// le damos el valor del modelo a la tabla
            
            
            double mediaValor = media(valoresObtenidos);
            double varianzaValor = varianza(valoresObtenidos, mediaValor);
            txt_media.setText((Math.rint(mediaValor * 10000) / 10000) + "");
            txt_mediana.setText((Math.rint(mediana(valoresObtenidos) * 10000) / 10000) + "");
            txt_varianza.setText((Math.rint(varianzaValor * 10000) / 10000) + "");
            txt_desviacionEstandar.setText((Math.rint(Math.sqrt(varianzaValor) * 10000) / 10000) + "");
            txt_moda.setText(getModa(valoresObtenidos)+"");

        }
    }//GEN-LAST:event_btn_calcularMouseClicked
    
    //obtenemos la moda
    public static int getModa(int muestra[]) {

    int maximoNumRepeticiones= 0;
    int moda= 0;

    for(int i=0; i<muestra.length; i++)
    {
        int numRepeticiones= 0;
        for(int j=0; j<muestra.length; j++)
        {
            if(muestra[i]==muestra[j])
            {
                numRepeticiones++;
            }   //fin if
            if(numRepeticiones>maximoNumRepeticiones)
            {
                moda= muestra[i];
                maximoNumRepeticiones= numRepeticiones;
            }   //fin if
        }
    }   //fin for
    return moda;
}  
    
    //retornamos el valor maximo
    public static int valorMaximo(int[] valoresObtenidos) {
        int vMaximo = 0;
        for (int i = 0; i < valoresObtenidos.length; i++) {
            vMaximo = Math.max(vMaximo, valoresObtenidos[i]);
        }
        return vMaximo;
    }

    //retornamos el valor minimo
    public static int valorMinimo(int[] valoresObtenidos) {
        int vMaximo = valoresObtenidos[0];
        for (int i = 1; i < valoresObtenidos.length; i++) {
            vMaximo = Math.min(vMaximo, valoresObtenidos[i]);
        }
        return vMaximo;
    }

    //metodo para generar la media
    public static double media(int[] valoresObtenidos) {
        double total = 0;
        for (int i = 0; i < valoresObtenidos.length; i++) {
            total += valoresObtenidos[i];

        }
        total = total / valoresObtenidos.length;

        return total;
    }

    //retornamos la mediana
    public static int mediana(int[] valoresObtenidos) {
        int[] orden = ordenar(valoresObtenidos, 0);
        int valor = Math.round(valoresObtenidos.length / 2);
        int total = orden[valor];
        return total;
    }

    //retornamos la varianza
    public static double varianza(int[] valoresObtenidos, double media) {
        double auxAcumulador = 0;
        for (int i = 0; i < valoresObtenidos.length; i++) {
            auxAcumulador += Math.pow(valoresObtenidos[i] - media, 2);
        }
        auxAcumulador = auxAcumulador / (valoresObtenidos.length - 1);

        return auxAcumulador;
    }

    //retornamos los valores ordenados 0 para ascendete 1 para desendente
    public static int[] ordenar(int[] v, int ord) {
        int i, j;
        int n = v.length, aux = 0;

        for (i = 0; i < n - 1; i++) {
            for (j = i + 1; j < n; j++) {
                if (ord == 0) {
                    if (v[i] > v[j]) {
                        aux = v[j];
                        v[j] = v[i];
                        v[i] = aux;
                    } else if (ord == 1) {
                        if (v[i] < v[j]) {
                            aux = v[i];
                            v[i] = v[j];
                            v[j] = aux;
                        }
                    }
                }
            }
        }
        return v;
    }

    private void txt_kMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt_kMouseExited


    }//GEN-LAST:event_txt_kMouseExited

    private void txt_kKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_kKeyReleased

        try {
            this.k = Integer.parseInt(txt_k.getText());//transformamos el valor de k en caso de que se ingrese un double o string saltara al catch

        } catch (NumberFormatException e) {//catch en caso de que se ingrese un decimal u string

            try {
//                Double.parseDouble(txt_k.getText());//transformamos a double en caso 
//                //de exitir un error saltara a la exepcion
//                JOptionPane.showMessageDialog(null, "El valor de K debe ser entero no decimal", "ERROR", JOptionPane.ERROR_MESSAGE);//enviamos el mensaje de error correspondiente
//                txt_k.setText("");
//                lbl_a.setText("");
            } catch (NumberFormatException e2) {// en caso de existir letras
                JOptionPane.showMessageDialog(null, "Ingrese valores numericos", "ERROR", JOptionPane.ERROR_MESSAGE); //enviamos el mensaje de error
                txt_k.setText("");

            }

        }
    }//GEN-LAST:event_txt_kKeyReleased

    private void btn_calcularKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btn_calcularKeyPressed


    }//GEN-LAST:event_btn_calcularKeyPressed

    private void txt_varianzaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_varianzaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_varianzaActionPerformed


    private void btn_histogramaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_histogramaActionPerformed
        //////////////////////////////////////////////////////////////////////////////////////////////////////7

        a = Integer.parseInt(txt_numeroIntervalo.getText());//numero de intervalos
        double numMax = valorMaximo(valoresObtenidos);
        double numMin = valorMinimo(valoresObtenidos);
        double rango = numMax - numMin;
        int amplitudIntervalo = (int) Math.round(rango / a);

//        System.out.println("maximo" + numMax);
//        System.out.println("minimo" + numMin);
//        System.out.println("rango" + rango);
//        System.out.println("inter" + amplitudIntervalo);
        double intervalosGenerados[][] = new double[a][2];
        intervalosGenerados[0][0] = numMin;
        intervalosGenerados[0][1] = numMin + amplitudIntervalo;
        for (int i = 1; i < intervalosGenerados.length; i++) {
            for (int j = 0; j < 2; j++) {
                if (j == 0) {
                    intervalosGenerados[i][j] = intervalosGenerados[i - 1][1];
                } else {
                    intervalosGenerados[i][j] = intervalosGenerados[i - 1][1] + amplitudIntervalo;
                }
            }
        }
        ///////////////////////////////////////coprobaciones
//        for (int i = 0; i < intervalosGenerados.length; i++) {
//            for (int j = 0; j < 2; j++) {
//                System.out.println(intervalosGenerados[i][j]);
//            }
//        }
        double intervaloHistograma[] = new double[a];
        for (int i = 0; i < intervalosGenerados.length; i++) {

            intervaloHistograma[i] = Math.round((intervalosGenerados[i][0] + intervalosGenerados[i][1]) / 2);

        }
        intervalosEjeXHistograma = intervaloHistograma;
        
        ///////////////////////////////////////coprobaciones
//            
//        for (int i = 0; i < intervaloHistograma.length; i++) {
//            System.out.println("his" + intervaloHistograma[i]);
//
//        }
//  
        int frecuencias[] = new int[a];
        for (int i = 0; i < frecuencias.length; i++) {
            int cont = 0;

            for (int j = 0; j < valoresObtenidos.length; j++) {
                if (j == 0) {
                    if (valoresObtenidos[j] >= intervalosGenerados[i][0] && valoresObtenidos[j] <= intervalosGenerados[i][1]) {
                        cont++;
                    }
                } else if (valoresObtenidos[j] > intervalosGenerados[i][0] && valoresObtenidos[j] <= intervalosGenerados[i][1]) {
                    cont++;
                }
            }
            frecuencias[i] = cont;
        }
        frecuenciaGlobal = frecuencias;
        Datos = new DefaultCategoryDataset();
     
        ///////////////////////////////////////coprobaciones
//        for (int i = 0; i < frecuencias.length; i++) {
//            System.out.println("i " + i + "->" + frecuencias[i]);
//
//        }
        
        for (int i = 0; i < frecuencias.length; i++) {
            
            Datos.addValue(frecuencias[i], "Data", intervaloHistograma[i] + "");

        }

        grafica = ChartFactory.createBarChart3D("Histograma",
                "Intervalos : (valor minimo= " + numMin + "; Amplitud del intervalo=" + amplitudIntervalo + ")", "Frecuencia", Datos,
                PlotOrientation.VERTICAL, true, true, false);

        //para el boton
        ChartPanel Panel = new ChartPanel(grafica);
        JFrame Ventana = new JFrame("JFreeChart");
        Ventana.getContentPane().add(Panel);
        Ventana.pack();
        Ventana.setVisible(true);
        Ventana.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);

        //////////////////////////////////////////////////////////////////////////////////////////////////////7    
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_histogramaActionPerformed

    private void btn_verGraficaBinomialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_verGraficaBinomialActionPerformed

        int numeroP = Integer.parseInt(txt_binomialP.getText());
        System.out.println("numeroP" + numeroP);
        double porcentajeP = (numeroP);
        double porcentajeQ = 100 - numeroP;
        porcentajeP = porcentajeP / 100;
        porcentajeQ = porcentajeQ / 100;
        double[] calculoBinomial = new double[intervalosEjeXHistograma.length ];
        int n = intervalosEjeXHistograma.length;
        double kC = 0;

        for (int i = 1; i < calculoBinomial.length; i++) {
            kC = intervalosEjeXHistograma[i - 1];
            calculoBinomial[i] = combinaciones(n, kC)* Math.pow(porcentajeP, kC)*Math.pow(porcentajeQ, n-kC);
        }
        
        Datos = new DefaultCategoryDataset();
        Datos.addValue(calculoBinomial[0], "Data", 1 + "");
        for(int i= 1; i<calculoBinomial.length;i++){
            
            Datos.addValue(calculoBinomial[i], "Data",intervalosEjeXHistograma[i-1] + "");
        }
        
        grafica = ChartFactory.createBarChart3D("Distribucion Binomial",
                "Intervalos ", "Porcentajes", Datos,
                PlotOrientation.VERTICAL, true, true, false);
        
        
        ////////////////////////////////////////////////////////////////////////////////
//        double[] a = {1, 0.0, 3.0};
//        double media = media(valoresObtenidos);
//        Function2D p = new NormalDistributionFunction2D(media, Math.sqrt(varianza(valoresObtenidos, media)));
//        XYDataset dataset = DatasetUtilities.sampleFunction2D(p, -20.0, 20.0, 200, "grafica de z");
//        grafica = ChartFactory.createXYLineChart("Distribucion normal", "X", "Y", dataset, PlotOrientation.VERTICAL, true, true, false);
//        
        ////////////////////////////////////////////////////////////////////////////////
        //para el boton
        ChartPanel Panel = new ChartPanel(grafica);
        JFrame Ventana = new JFrame("JFreeChart");
        Ventana.getContentPane().add(Panel);
        Ventana.pack();
        Ventana.setVisible(true);
        Ventana.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        
//        for (int i = 0; i < calculoBinomial.length; i++) {
//            System.out.println("bino" + calculoBinomial[i]);
//        }
// TODO add your handling code here:
    }//GEN-LAST:event_btn_verGraficaBinomialActionPerformed

    private void btn_graficaNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_graficaNormalActionPerformed
      
        double media = media(valoresObtenidos);
        Function2D p = new NormalDistributionFunction2D(media, Math.sqrt(varianza(valoresObtenidos, media)));
        XYDataset dataset = DatasetUtilities.sampleFunction2D(p, -50.0, 50.0, 300, "grafica de z");
        grafica = ChartFactory.createXYLineChart("Distribucion normal", "X", "Y", dataset, PlotOrientation.VERTICAL, true, true, false);
        
        ////////////////////////////////////////////////////////////////////////////////
        //para el boton
        ChartPanel Panel = new ChartPanel(grafica);
        JFrame Ventana = new JFrame("JFreeChart");
        Ventana.getContentPane().add(Panel);
        Ventana.pack();
        Ventana.setVisible(true);
        Ventana.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);  // TODO add your handling code here:
    }//GEN-LAST:event_btn_graficaNormalActionPerformed

    private void btn_calcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_calcularActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_calcularActionPerformed

    private void btn_mostrarUniformeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_mostrarUniformeActionPerformed
        DistribucionUniforme uniforme = new DistribucionUniforme();
        uniforme.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_btn_mostrarUniformeActionPerformed

    //retornamos el factorial de un numero
    public static double factorial(double n) {
        long resultado = 1;
        for (long i = 2; i <= n; ++i) {
            resultado *= i;
        }
        return resultado;
    }
    //calculo de conbinaciones
    public static double combinaciones(int n, double r) {
        return factorial(n) / (factorial(r) * factorial(n - r));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(distribucioonBinomialNormal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(distribucioonBinomialNormal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(distribucioonBinomialNormal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(distribucioonBinomialNormal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new distribucioonBinomialNormal().setVisible(true);
            }
        });

    }

    //retornamos el ultimo valor primo para el calculo de m
    static double obtenerUltimoPrimoM(int numero) {
        int contador = 2; //almacena el conteo desde 2 ya que un primo es divisible para si mismo y para la unidad
        boolean primo = true;//almacena la verificacion de que si el numero es primo o no

        while ((primo) && (contador != numero)) {//mietras primo sea true y contador no sea igual al numero que es ingresado 
            if (numero % contador == 0) { //verificamos que el numero no sea divisible
                primo = false;//retornamos el valor falso en caso de encontrar un numero que sea divisible
            }
            contador++;//aumentamos el contador
        }

        if (primo) {//en caso de ser primo retornamos el numero
            return numero;
        } else {
            return obtenerUltimoPrimoM(numero - 1); //reducimos en uno el valor a buscar
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_calcular;
    private javax.swing.JButton btn_graficaNormal;
    private javax.swing.JButton btn_histograma;
    private javax.swing.JButton btn_mostrarUniforme;
    private javax.swing.JButton btn_verGraficaBinomial;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JLabel lbl_Media;
    private javax.swing.JLabel lbl_binomialP;
    private javax.swing.JLabel lbl_desviacionEstandar;
    private javax.swing.JLabel lbl_k;
    private javax.swing.JLabel lbl_mediana;
    private javax.swing.JLabel lbl_mediana1;
    private javax.swing.JLabel lbl_numIntervalosHistograma;
    private javax.swing.JLabel lbl_periodo;
    private javax.swing.JLabel lbl_varianza;
    private javax.swing.JLabel principal;
    private javax.swing.JTable table_datos;
    private javax.swing.JFormattedTextField txt_binomialP;
    private javax.swing.JTextField txt_desviacionEstandar;
    private javax.swing.JTextField txt_k;
    private javax.swing.JTextField txt_media;
    private javax.swing.JTextField txt_mediana;
    private javax.swing.JTextField txt_moda;
    private javax.swing.JFormattedTextField txt_numeroIntervalo;
    private javax.swing.JTextField txt_varianza;
    // End of variables declaration//GEN-END:variables
}
